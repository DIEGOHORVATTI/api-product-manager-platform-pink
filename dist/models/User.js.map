{"version":3,"sources":["../../src/models/User.ts"],"sourcesContent":["import { t as Type } from 'elysia'\nimport { Schema } from 'mongoose'\n\nimport { collectionsData } from '@/constants/config'\n\nimport { setDefaultSettingsSchema } from '@/shared/set-default-settings-schema'\nimport { connectDB } from '@/shared/connection-db'\n\nexport const UserCredentialsSchema = {\n  email: Type.String({ format: 'email' }),\n  password: Type.String({ minLength: 6, maxLength: 20, pattern: '^[a-zA-Z0-9]*$' })\n}\n\nexport const UserSchema = {\n  body: Type.Object({\n    ...UserCredentialsSchema,\n    name: Type.String(),\n    surname: Type.String(),\n    isArchived: Type.Optional(Type.Boolean()),\n    photo: Type.Optional(Type.String()),\n    company: Type.Optional(\n      Type.Array(\n        Type.Object({\n          id: Type.String(),\n          name: Type.String(),\n          cnpj: Type.String()\n        })\n      )\n    ),\n    plan: Type.Enum({ Free: 'Free', Pro: 'Pro' })\n  })\n}\n\nexport type IUser = typeof UserSchema.body.static & {\n  comparePassword: (password: string) => Promise<boolean>\n  hashPassword: (this: IUser) => Promise<string>\n  permissions?: string[]\n  resetPasswordToken?: string\n  resetPasswordExpires?: Date\n}\n\nconst SchemaModel = new Schema<IUser>(\n  {\n    name: {\n      type: String,\n      required: true\n    },\n    surname: {\n      type: String,\n      required: true\n    },\n    email: {\n      type: String,\n      required: true,\n      unique: true\n    },\n    password: {\n      type: String,\n      required: true\n    },\n    permissions: {\n      type: [String],\n      default: ['user']\n    },\n    isArchived: {\n      type: Boolean,\n      default: false\n    },\n    photo: String,\n    company: {\n      type: [\n        {\n          id: {\n            type: String,\n            required: true\n          },\n          name: {\n            type: String,\n            required: true\n          },\n          cnpj: {\n            type: String,\n            required: true\n          }\n        }\n      ]\n    },\n    plan: {\n      type: String,\n      enum: ['Free', 'Pro'],\n      default: 'Free'\n    },\n    resetPasswordToken: String,\n    resetPasswordExpires: Date\n  },\n  {\n    timestamps: true,\n    collection: collectionsData.User.collection\n  }\n)\n\nsetDefaultSettingsSchema(SchemaModel)\n\nSchemaModel.methods.comparePassword = function (this: IUser, password: string) {\n  return Bun.password.verify(password, this.password)\n}\n\nSchemaModel.methods.hashPassword = function (this: IUser) {\n  return Bun.password.hash(this.password, {\n    algorithm: 'argon2id',\n    memoryCost: 65536, // 64MB\n    timeCost: 2\n  })\n}\n\nexport const User = connectDB.model<IUser>(collectionsData.User.name, SchemaModel)\n"],"names":["User","UserCredentialsSchema","UserSchema","email","Type","String","format","password","minLength","maxLength","pattern","body","Object","name","surname","isArchived","Optional","Boolean","photo","company","Array","id","cnpj","plan","Enum","Free","Pro","SchemaModel","Schema","type","required","unique","permissions","default","enum","resetPasswordToken","resetPasswordExpires","Date","timestamps","collection","collectionsData","setDefaultSettingsSchema","methods","comparePassword","Bun","verify","hashPassword","hash","algorithm","memoryCost","timeCost","connectDB","model"],"mappings":"2MAmHaA,IAAI,mBAAJA,MA3GAC,qBAAqB,mBAArBA,uBAKAC,UAAU,mBAAVA,oCAba,kCACH,kCAES,+DAES,qEACf,2BAEnB,MAAMD,sBAAwB,CACnCE,MAAOC,SAAI,CAACC,MAAM,CAAC,CAAEC,OAAQ,OAAQ,GACrCC,SAAUH,SAAI,CAACC,MAAM,CAAC,CAAEG,UAAW,EAAGC,UAAW,GAAIC,QAAS,gBAAiB,EACjF,EAEO,MAAMR,WAAa,CACxBS,KAAMP,SAAI,CAACQ,MAAM,CAAC,CAChB,GAAGX,qBAAqB,CACxBY,KAAMT,SAAI,CAACC,MAAM,GACjBS,QAASV,SAAI,CAACC,MAAM,GACpBU,WAAYX,SAAI,CAACY,QAAQ,CAACZ,SAAI,CAACa,OAAO,IACtCC,MAAOd,SAAI,CAACY,QAAQ,CAACZ,SAAI,CAACC,MAAM,IAChCc,QAASf,SAAI,CAACY,QAAQ,CACpBZ,SAAI,CAACgB,KAAK,CACRhB,SAAI,CAACQ,MAAM,CAAC,CACVS,GAAIjB,SAAI,CAACC,MAAM,GACfQ,KAAMT,SAAI,CAACC,MAAM,GACjBiB,KAAMlB,SAAI,CAACC,MAAM,EACnB,KAGJkB,KAAMnB,SAAI,CAACoB,IAAI,CAAC,CAAEC,KAAM,OAAQC,IAAK,KAAM,EAC7C,EACF,EAUA,MAAMC,YAAc,IAAIC,gBAAM,CAC5B,CACEf,KAAM,CACJgB,KAAMxB,OACNyB,SAAU,IACZ,EACAhB,QAAS,CACPe,KAAMxB,OACNyB,SAAU,IACZ,EACA3B,MAAO,CACL0B,KAAMxB,OACNyB,SAAU,KACVC,OAAQ,IACV,EACAxB,SAAU,CACRsB,KAAMxB,OACNyB,SAAU,IACZ,EACAE,YAAa,CACXH,KAAM,CAACxB,OAAO,CACd4B,QAAS,CAAC,OAAO,AACnB,EACAlB,WAAY,CACVc,KAAMZ,QACNgB,QAAS,KACX,EACAf,MAAOb,OACPc,QAAS,CACPU,KAAM,CACJ,CACER,GAAI,CACFQ,KAAMxB,OACNyB,SAAU,IACZ,EACAjB,KAAM,CACJgB,KAAMxB,OACNyB,SAAU,IACZ,EACAR,KAAM,CACJO,KAAMxB,OACNyB,SAAU,IACZ,CACF,EACD,AACH,EACAP,KAAM,CACJM,KAAMxB,OACN6B,KAAM,CAAC,OAAQ,MAAM,CACrBD,QAAS,MACX,EACAE,mBAAoB9B,OACpB+B,qBAAsBC,IACxB,EACA,CACEC,WAAY,KACZC,WAAYC,uBAAe,CAACxC,IAAI,CAACuC,UAAU,AAC7C,GAGFE,GAAAA,kDAAwB,EAACd,YAEzBA,CAAAA,YAAYe,OAAO,CAACC,eAAe,CAAG,SAAuBpC,QAAgB,EAC3E,OAAOqC,IAAIrC,QAAQ,CAACsC,MAAM,CAACtC,SAAU,IAAI,CAACA,QAAQ,CACpD,CAEAoB,CAAAA,YAAYe,OAAO,CAACI,YAAY,CAAG,WACjC,OAAOF,IAAIrC,QAAQ,CAACwC,IAAI,CAAC,IAAI,CAACxC,QAAQ,CAAE,CACtCyC,UAAW,WACXC,WAAY,MACZC,SAAU,CACZ,EACF,EAEO,MAAMlD,KAAOmD,uBAAS,CAACC,KAAK,CAAQZ,uBAAe,CAACxC,IAAI,CAACa,IAAI,CAAEc"}