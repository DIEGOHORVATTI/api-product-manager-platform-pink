{"version":3,"sources":["../../src/models/User.ts"],"sourcesContent":["import { t as Type } from 'elysia'\nimport { Schema, Types } from 'mongoose'\n\nimport { collectionsData } from '@/constants/config'\n\nimport { setDefaultSettingsSchema } from '@/shared/set-default-settings-schema'\nimport { connectDB } from '@/shared/connection-db'\n\nexport const UserCredentialsSchema = {\n  email: Type.String({ format: 'email' }),\n  password: Type.String({ minLength: 6, maxLength: 20, pattern: '^[a-zA-Z0-9]*$' })\n}\n\nexport const UserSchema = {\n  body: Type.Object({\n    ...UserCredentialsSchema,\n    name: Type.String(),\n    surname: Type.String(),\n    photo: Type.Optional(Type.String()),\n    company: Type.Optional(\n      Type.Array(\n        Type.Object({\n          id: Type.String(),\n          name: Type.String(),\n          cnpj: Type.String()\n        })\n      )\n    ),\n    plan: Type.Enum({ Free: 'Free', Pro: 'Pro' })\n  })\n}\n\nexport type IUser = typeof UserSchema.body.static & {\n  comparePassword: (password: string) => Promise<boolean>\n  hashPassword: (this: IUser) => Promise<string>\n  permissions?: string[]\n  resetPasswordToken?: string\n  resetPasswordExpires?: Date\n}\n\nconst SchemaModel = new Schema<IUser>(\n  {\n    name: {\n      type: String,\n      required: true\n    },\n    surname: {\n      type: String,\n      required: true\n    },\n    email: {\n      type: String,\n      required: true,\n      unique: true\n    },\n    password: {\n      type: String,\n      required: true\n    },\n    permissions: {\n      type: [String],\n      default: ['user']\n    },\n    photo: String,\n    company: {\n      type: [\n        {\n          id: {\n            type: String,\n            required: true\n          },\n          name: {\n            type: String,\n            required: true\n          },\n          cnpj: {\n            type: String,\n            required: true\n          }\n        }\n      ]\n    },\n    plan: {\n      type: String,\n      enum: ['Free', 'Pro'],\n      default: 'Free'\n    },\n    resetPasswordToken: String,\n    resetPasswordExpires: Date\n  },\n  {\n    timestamps: true,\n    collection: collectionsData.User.collection\n  }\n)\n\nsetDefaultSettingsSchema(SchemaModel)\n\nSchemaModel.methods.comparePassword = function (this: IUser, password: string) {\n  return Bun.password.verify(password, this.password)\n}\n\nSchemaModel.methods.hashPassword = function (this: IUser) {\n  return Bun.password.hash(this.password, {\n    algorithm: 'argon2id',\n    memoryCost: 65536, // 64MB\n    timeCost: 2\n  })\n}\n\nexport const User = connectDB.model<IUser>(collectionsData.User.name, SchemaModel)\n"],"names":["User","UserCredentialsSchema","UserSchema","email","Type","String","format","password","minLength","maxLength","pattern","body","Object","name","surname","photo","Optional","company","Array","id","cnpj","plan","Enum","Free","Pro","SchemaModel","Schema","type","required","unique","permissions","default","enum","resetPasswordToken","resetPasswordExpires","Date","timestamps","collection","collectionsData","setDefaultSettingsSchema","methods","comparePassword","Bun","verify","hashPassword","hash","algorithm","memoryCost","timeCost","connectDB","model"],"mappings":";;;;;;;;;;;IA8GaA,IAAI;eAAJA;;IAtGAC,qBAAqB;eAArBA;;IAKAC,UAAU;eAAVA;;;wBAba;0BACI;wBAEE;0CAES;8BACf;AAEnB,MAAMD,wBAAwB;IACnCE,OAAOC,SAAI,CAACC,MAAM,CAAC;QAAEC,QAAQ;IAAQ;IACrCC,UAAUH,SAAI,CAACC,MAAM,CAAC;QAAEG,WAAW;QAAGC,WAAW;QAAIC,SAAS;IAAiB;AACjF;AAEO,MAAMR,aAAa;IACxBS,MAAMP,SAAI,CAACQ,MAAM,CAAC;QAChB,GAAGX,qBAAqB;QACxBY,MAAMT,SAAI,CAACC,MAAM;QACjBS,SAASV,SAAI,CAACC,MAAM;QACpBU,OAAOX,SAAI,CAACY,QAAQ,CAACZ,SAAI,CAACC,MAAM;QAChCY,SAASb,SAAI,CAACY,QAAQ,CACpBZ,SAAI,CAACc,KAAK,CACRd,SAAI,CAACQ,MAAM,CAAC;YACVO,IAAIf,SAAI,CAACC,MAAM;YACfQ,MAAMT,SAAI,CAACC,MAAM;YACjBe,MAAMhB,SAAI,CAACC,MAAM;QACnB;QAGJgB,MAAMjB,SAAI,CAACkB,IAAI,CAAC;YAAEC,MAAM;YAAQC,KAAK;QAAM;IAC7C;AACF;AAUA,MAAMC,cAAc,IAAIC,gBAAM,CAC5B;IACEb,MAAM;QACJc,MAAMtB;QACNuB,UAAU;IACZ;IACAd,SAAS;QACPa,MAAMtB;QACNuB,UAAU;IACZ;IACAzB,OAAO;QACLwB,MAAMtB;QACNuB,UAAU;QACVC,QAAQ;IACV;IACAtB,UAAU;QACRoB,MAAMtB;QACNuB,UAAU;IACZ;IACAE,aAAa;QACXH,MAAM;YAACtB;SAAO;QACd0B,SAAS;YAAC;SAAO;IACnB;IACAhB,OAAOV;IACPY,SAAS;QACPU,MAAM;YACJ;gBACER,IAAI;oBACFQ,MAAMtB;oBACNuB,UAAU;gBACZ;gBACAf,MAAM;oBACJc,MAAMtB;oBACNuB,UAAU;gBACZ;gBACAR,MAAM;oBACJO,MAAMtB;oBACNuB,UAAU;gBACZ;YACF;SACD;IACH;IACAP,MAAM;QACJM,MAAMtB;QACN2B,MAAM;YAAC;YAAQ;SAAM;QACrBD,SAAS;IACX;IACAE,oBAAoB5B;IACpB6B,sBAAsBC;AACxB,GACA;IACEC,YAAY;IACZC,YAAYC,uBAAe,CAACtC,IAAI,CAACqC,UAAU;AAC7C;AAGFE,IAAAA,kDAAwB,EAACd;AAEzBA,YAAYe,OAAO,CAACC,eAAe,GAAG,SAAuBlC,QAAgB;IAC3E,OAAOmC,IAAInC,QAAQ,CAACoC,MAAM,CAACpC,UAAU,IAAI,CAACA,QAAQ;AACpD;AAEAkB,YAAYe,OAAO,CAACI,YAAY,GAAG;IACjC,OAAOF,IAAInC,QAAQ,CAACsC,IAAI,CAAC,IAAI,CAACtC,QAAQ,EAAE;QACtCuC,WAAW;QACXC,YAAY;QACZC,UAAU;IACZ;AACF;AAEO,MAAMhD,OAAOiD,uBAAS,CAACC,KAAK,CAAQZ,uBAAe,CAACtC,IAAI,CAACa,IAAI,EAAEY"}