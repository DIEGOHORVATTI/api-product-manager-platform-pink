{"version":3,"sources":["../../../src/services/auth/register.ts"],"sourcesContent":["import { IUser, User } from '@/models/User'\nimport { error } from 'elysia'\n\nimport { hashPassword } from '@/shared/hashing-password'\n\nexport const registerService = async (userData: IUser) => {\n  if (await User.findOne({ email: userData.email })) {\n    throw error('Conflict', { error: 'User with this email already exists' })\n  }\n\n  const hashedPassword = await hashPassword(userData.password)\n  const newUser = new User({\n    ...userData,\n    password: hashedPassword\n  })\n\n  await newUser.save().catch(() => {\n    throw error('Internal Server Error', { error: 'Failed to create user' })\n  })\n\n  const { password, ...user } = newUser.toObject()\n\n  return { user }\n}\n"],"names":["registerService","userData","User","findOne","email","error","hashedPassword","hashPassword","password","newUser","save","catch","user","toObject"],"mappings":";;;;+BAKaA;;;eAAAA;;;sBALe;wBACN;iCAEO;AAEtB,MAAMA,kBAAkB,OAAOC;IACpC,IAAI,MAAMC,UAAI,CAACC,OAAO,CAAC;QAAEC,OAAOH,SAASG,KAAK;IAAC,IAAI;QACjD,MAAMC,IAAAA,aAAK,EAAC,YAAY;YAAEA,OAAO;QAAsC;IACzE;IAEA,MAAMC,iBAAiB,MAAMC,IAAAA,6BAAY,EAACN,SAASO,QAAQ;IAC3D,MAAMC,UAAU,IAAIP,UAAI,CAAC;QACvB,GAAGD,QAAQ;QACXO,UAAUF;IACZ;IAEA,MAAMG,QAAQC,IAAI,GAAGC,KAAK,CAAC;QACzB,MAAMN,IAAAA,aAAK,EAAC,yBAAyB;YAAEA,OAAO;QAAwB;IACxE;IAEA,MAAM,EAAEG,QAAQ,EAAE,GAAGI,MAAM,GAAGH,QAAQI,QAAQ;IAE9C,OAAO;QAAED;IAAK;AAChB"}