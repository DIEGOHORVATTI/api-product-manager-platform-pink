{"version":3,"sources":["../../src/middlewares/jwt.ts"],"sourcesContent":["import { Elysia, error, t } from 'elysia'\n\nimport { User } from '@/models/User'\n\nimport { jwtSettings } from '@/shared/jwt-settings'\n\nconst bearerTokenGuard = {\n  headers: t.Object({\n    authorization: t.String({ pattern: '^Bearer \\\\S+$' })\n  })\n}\n\nexport const jwt = new Elysia()\n  .use(jwtSettings)\n  .guard(bearerTokenGuard)\n  .derive(async ({ headers: { authorization }, jwt }) => {\n    if (!authorization) {\n      throw error('Unauthorized', { error: 'No token provided' })\n    }\n\n    const token = authorization.slice('Bearer '.length)\n    const decoded = await jwt.verify(token)\n\n    if (!decoded) {\n      throw error('Unauthorized', { error: 'Invalid token payload' })\n    }\n\n    const user = await User.findById(decoded.id)\n    if (!user) {\n      throw error('Unauthorized', { error: 'User not found' })\n    }\n\n    return { user }\n  })\n"],"names":["jwt","bearerTokenGuard","headers","t","Object","authorization","String","pattern","Elysia","use","jwtSettings","guard","derive","error","token","slice","length","decoded","verify","user","User","findById","id"],"mappings":";;;;+BAYaA;;;eAAAA;;;wBAZoB;sBAEZ;6BAEO;AAE5B,MAAMC,mBAAmB;IACvBC,SAASC,SAAC,CAACC,MAAM,CAAC;QAChBC,eAAeF,SAAC,CAACG,MAAM,CAAC;YAAEC,SAAS;QAAgB;IACrD;AACF;AAEO,MAAMP,MAAM,IAAIQ,cAAM,GAC1BC,GAAG,CAACC,wBAAW,EACfC,KAAK,CAACV,kBACNW,MAAM,CAAC,OAAO,EAAEV,SAAS,EAAEG,aAAa,EAAE,EAAEL,GAAG,EAAE;IAChD,IAAI,CAACK,eAAe;QAClB,MAAMQ,IAAAA,aAAK,EAAC,gBAAgB;YAAEA,OAAO;QAAoB;IAC3D;IAEA,MAAMC,QAAQT,cAAcU,KAAK,CAAC,UAAUC,MAAM;IAClD,MAAMC,UAAU,MAAMjB,IAAIkB,MAAM,CAACJ;IAEjC,IAAI,CAACG,SAAS;QACZ,MAAMJ,IAAAA,aAAK,EAAC,gBAAgB;YAAEA,OAAO;QAAwB;IAC/D;IAEA,MAAMM,OAAO,MAAMC,UAAI,CAACC,QAAQ,CAACJ,QAAQK,EAAE;IAC3C,IAAI,CAACH,MAAM;QACT,MAAMN,IAAAA,aAAK,EAAC,gBAAgB;YAAEA,OAAO;QAAiB;IACxD;IAEA,OAAO;QAAEM;IAAK;AAChB"}