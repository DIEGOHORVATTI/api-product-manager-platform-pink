{"version":3,"sources":["../../src/middlewares/jwt.ts"],"sourcesContent":["import { Elysia, error, t } from 'elysia'\n\nimport { User } from '@/models/User'\n\nimport { jwtSettings } from '@/shared/jwt-settings'\n\nconst bearerTokenGuard = {\n  headers: t.Object({\n    authorization: t.String({\n      pattern: '^Bearer \\\\S+$'\n    })\n  })\n}\n\nexport const jwt = new Elysia()\n  .use(jwtSettings)\n  .guard(bearerTokenGuard)\n  .resolve(({ headers: { authorization } }) => ({ token: authorization.slice('Bearer '.length) }))\n  .derive(async ({ token, jwt }) => {\n    const decoded = await jwt.verify(token)\n\n    if (!decoded) {\n      throw error('Unauthorized', 'Invalid token payload')\n    }\n\n    const user = await User.findById(decoded.id)\n    if (!user) {\n      throw error('Unauthorized', 'User not found')\n    }\n\n    return { user }\n  })\n"],"names":["jwt","bearerTokenGuard","headers","t","Object","authorization","String","pattern","Elysia","use","jwtSettings","guard","resolve","token","slice","length","derive","decoded","verify","error","user","User","findById","id"],"mappings":";;;;+BAcaA;;;eAAAA;;;wBAdoB;sBAEZ;6BAEO;AAE5B,MAAMC,mBAAmB;IACvBC,SAASC,SAAC,CAACC,MAAM,CAAC;QAChBC,eAAeF,SAAC,CAACG,MAAM,CAAC;YACtBC,SAAS;QACX;IACF;AACF;AAEO,MAAMP,MAAM,IAAIQ,cAAM,GAC1BC,GAAG,CAACC,wBAAW,EACfC,KAAK,CAACV,kBACNW,OAAO,CAAC,CAAC,EAAEV,SAAS,EAAEG,aAAa,EAAE,EAAE,GAAM,CAAA;QAAEQ,OAAOR,cAAcS,KAAK,CAAC,UAAUC,MAAM;IAAE,CAAA,GAC5FC,MAAM,CAAC,OAAO,EAAEH,KAAK,EAAEb,GAAG,EAAE;IAC3B,MAAMiB,UAAU,MAAMjB,IAAIkB,MAAM,CAACL;IAEjC,IAAI,CAACI,SAAS;QACZ,MAAME,IAAAA,aAAK,EAAC,gBAAgB;IAC9B;IAEA,MAAMC,OAAO,MAAMC,UAAI,CAACC,QAAQ,CAACL,QAAQM,EAAE;IAC3C,IAAI,CAACH,MAAM;QACT,MAAMD,IAAAA,aAAK,EAAC,gBAAgB;IAC9B;IAEA,OAAO;QAAEC;IAAK;AAChB"}